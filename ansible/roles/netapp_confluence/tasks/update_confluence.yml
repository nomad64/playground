---
# This file uses the ansible.builtin.uri module to interact with the Confluence REST API

- name: 1. Check if Confluence page exists
  ansible.builtin.uri:
    url: "{{ confluence_url }}/rest/api/content?spaceKey={{ confluence_space }}&title={{ confluence_page_title }}&expand=version"
    user: "{{ confluence_user }}"
    password: "{{ confluence_api_token }}"
    method: GET
    force_basic_auth: true
    status_code: 200
  register: page_check

- name: 2. Construct HTML content for the page body
  ansible.builtin.set_fact:
    confluence_content: |
      <p>This report was automatically generated by Ansible on <strong>{{ ansible_date_time.iso8601 }}</strong>.</p>
      <table>
        <tr>
          <th>Volume Name</th>
          <th>Size (GB)</th>
          <th>Security Style</th>
          <th>NFS Exports</th>
          <th>CIFS Shares</th>
        </tr>
        {% for vol in volume_details %}
        <tr>
          <td>{{ vol.name }}</td>
          <td>{{ vol.size_gb }}</td>
          <td>{{ vol.security_style }}</td>
          <td>{{ vol.nfs_exports | escape }}</td>
          <td>{{ vol.cifs_shares | escape }}</td>
        </tr>
        {% endfor %}
      </table>

- name: 3. Set facts for existing page to use for update
  ansible.builtin.set_fact:
    page_id: "{{ page_check.json.results[0].id }}"
    next_version: "{{ page_check.json.results[0].version.number + 1 }}"
  when: page_check.json.results | length > 0

- name: 4. Prepare the JSON payload for the request
  ansible.builtin.set_fact:
    confluence_payload:
      title: "{{ confluence_page_title }}"
      type: "page"
      space:
        key: "{{ confluence_space }}"
      body:
        storage:
          value: "{{ confluence_content }}"
          representation: "storage"
      # Add version info if we are updating an existing page
      version:
        number: "{{ next_version }}"
      # Add parent info if we are creating a new page
      ancestors:
        - title: "{{ confluence_parent_page }}"

# Task 5: Update the page if it exists
- name: 5. UPDATE existing Confluence page
  ansible.builtin.uri:
    url: "{{ confluence_url }}/rest/api/content/{{ page_id }}"
    user: "{{ confluence_user }}"
    password: "{{ confluence_api_token }}"
    method: PUT
    force_basic_auth: true
    body_format: json
    body: "{{ confluence_payload }}"
    headers:
      Content-Type: "application/json"
    status_code: 200
  when: page_check.json.results | length > 0

# Task 6: Create the page if it does not exist
- name: 6. CREATE new Confluence page
  ansible.builtin.uri:
    url: "{{ confluence_url }}/rest/api/content"
    user: "{{ confluence_user }}"
    password: "{{ confluence_api_token }}"
    method: POST
    force_basic_auth: true
    body_format: json
    body: "{{ confluence_payload | combine({'version': omit}) }}" # Omit version for creation
    headers:
      Content-Type: "application/json"
    status_code: 200
  when: page_check.json.results | length == 0
