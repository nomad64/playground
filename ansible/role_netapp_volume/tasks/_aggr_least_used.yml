---
- name: "Get NetApp Aggregate with Lowest Used Capacity"
  hosts: localhost # Run locally, as the NetApp modules connect directly to the array
  connection: local
  gather_facts: false

  vars:
    # NetApp ONTAP connection details
    netapp_hostname: "your_netapp_cluster_mgmt_ip_or_fqdn" # <<< CHANGE THIS
    netapp_username: "your_netapp_api_username"             # <<< CHANGE THIS
    netapp_password: "your_netapp_api_password"             # <<< CHANGE THIS (Use Ansible Vault for production!)
    netapp_validate_certs: false # Set to true for production with valid certs

  tasks:
    - name: "Gather NetApp aggregate information"
      netapp.ontap.na_ontap_info:
        hostname: "{{ netapp_hostname }}"
        username: "{{ netapp_username }}"
        password: "{{ netapp_password }}"
        validate_certs: "{{ netapp_validate_certs }}"
        gather_subset:
          - aggregates # Only gather aggregate details to minimize data transfer
      delegate_to: localhost
      register: ontap_info_result

    - name: "Check if aggregate information was retrieved"
      ansible.builtin.fail:
        msg: "Failed to retrieve aggregate information. Check connection details and permissions."
      when: not ontap_info_result.ontap_info['storage/aggregates'].records | default([])

    - name: "Find aggregate with the lowest used capacity"
      ansible.builtin.set_fact:
        lowest_used_aggregate_name: "{{
          ontap_info_result.ontap_info['storage/aggregates'].records |
          # Sort the list of aggregate records by the 'used_percent' field
          sort(attribute='space.block_storage.used_percent') |
          # Get the first item from the sorted list (which has the lowest used_percent)
          first |
          # Extract the 'name' field from that aggregate record
          json_query('name')
        }}"
      when: ontap_info_result.ontap_info['storage/aggregates'].records | length > 0

    - name: "Display the name of the aggregate with the lowest used capacity"
      ansible.builtin.debug:
        msg: "The aggregate with the lowest used capacity is: {{ lowest_used_aggregate_name }}"
      when: lowest_used_aggregate_name is defined
